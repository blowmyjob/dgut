<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.common.mapper.WorkDao" >
    <select id="getProcessByUserId" resultType="com.example.common.entity.WorkProcess">
        select * from Workprocess where userid = #{id} and state = #{state} and visable = 'true'
    </select>

    <update id="updateProcess">
        update Workprocess
            <set>
                <if test="state != null">
                   state = #{state},
                </if>
                <if test="roomId != null">
                   roomid = #{roomId}
                </if>
            </set>
         where id = #{id}
    </update>

    <insert id="insertProcess">
        insert into Workprocess (userid,state,jobid,resumeid) values(#{userid},'待查看',#{jobid},#{resumeid})
    </insert>

    <delete id="delProcess">
        delete from Workprocess where id = #{id}
    </delete>

    <select id="getProcessByIdAndState" resultType="com.example.common.entity.WorkProcess">
        select * from Workprocess where id = #{id} and state = #{state}
    </select>

    <select id="getWorkDetails" resultType="com.example.common.vo.WorkDetail">
        SELECT DISTINCT
	      Workprocess.id AS id,
	      userid,
	      jobid,
	      Workprocess.state,
	      updatetime,
	      Hire.workname,
	      Hire.description as jobdescription,
	      companyname,
	      Resume.address as address,
	      Workprocess.resumeid as resumeid,
	      Workprocess.roomid
        FROM
	      Company,
	      Workprocess,
	      Hire,
	      Resume
        WHERE
	      Company.id = Workprocess.Companyid
	      AND Workprocess.userid = #{userid}
	      AND Workprocess.state = #{state}
	      AND Hire.id = Workprocess.jobid
	     And Resume.id = Workprocess.resumeid
    </select>

    <select id="getProcessByCompanyId" resultType="com.example.common.vo.WorkDetail">
        select Workprocess.id as id,Workprocess.userid,Workprocess.state,User.username as name,jobid,Hire.workname as jobname,Hire.companyid,updatetime,Hire.description,Resume.address AS address,Workprocess.resumeid AS resumeid
        from Workprocess,User,Hire,Resume
        where User.id = Workprocess.userid and Hire.id = Workprocess.jobid and Workprocess.companyid=#{companyid} and Workprocess.state=#{state} and Resume.id = Workprocess.resumeid
    </select>

    <select id="findCompanyIdByUserId" resultType="java.lang.Integer">
        select companyid from Employee_Relationship where userid = #{userid}
    </select>

    <update id="updateState">
        update Workprocess set visable = #{state} where id = #{id}
    </update>

    <insert id="insertJob" parameterType="com.example.common.entity.Hire">
        insert into Hire (workname,description,hirecount,companyid,createtime,endtime,location,category,salary,requirements) values(#{workname},#{description},#{hirecount},#{companyid},now(),#{endtime},#{location},#{category},#{salary},#{requirements})
    </insert>

    <select id="selectAllJob" resultType="com.example.common.entity.Hire">
        select Hire.*,Company.companyname from Hire,Company where Hire.companyid = Company.id limit 0,6
    </select>

    <select id="searchJob" resultType="com.example.common.entity.Hire">
        select Hire.*,Company.companyname from Hire,Company
        <where>
            Hire.companyid = Company.id
            <if test="keyword != null">
                 And workname like '%${keyword}%'
            </if>
            <if test="location != null">
                AND location = #{location}
            </if>
            <if test="category != null">
                AND category = #{category}
            </if>
            <if test="id != null">
                AND Hire.id = #{id}
            </if>
        </where>
        order by endtime limit 0 , 7
    </select>

    <select id="getCatesByCategory" resultType="com.example.common.vo.Category">
        select count(*) as count,category from Hire
        <where>
            <if test="keyword != null">
                workname like '%${keyword}%'
            </if>
            <if test="location != null">
                AND location = #{location}
            </if>
            <if test="category != null">
                AND category = #{category}
            </if>
        </where>
        group by category
    </select>

    <select id="getCatesByLocation" resultType="com.example.common.vo.Category">
        select count(*) as count,location from Hire
        <where>
            <if test="keyword != null">
                workname like '%${keyword}%'
            </if>
            <if test="location != null">
                AND location = #{location}
            </if>
            <if test="category != null">
                AND category = #{category}
            </if>
        </where>
        group by location limit 0 , 7
    </select>

    <select id="getJobLastWeek" resultType="java.lang.Integer">
        select count(*) from Hire where YEARWEEK(date_format(createtime,'%Y-%m-%d')) = YEARWEEK(now())-1
    </select>

    <select id="selectCompanyById" resultType="com.example.common.entity.Company">
        select * from Company where id = #{id}
    </select>

    <insert id="createCompany" parameterType="com.example.common.entity.Company" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into Company(companyname,count,description) values(#{companyname},#{count},#{description})
    </insert>

    <insert id="createRelationship" parameterType="com.example.common.vo.Relationship" >
        insert into Employee_Relationship (userid,companyid,position) values (#{userid},#{companyid},#{position})
    </insert>

    <select id="selectEmploy" resultType="com.example.common.entity.Employee">
        select a.id as id,a.username as name,c.position as position,c.state as state,b.companyname as companyname
        from User a,Company b,Employee_Relationship c
        <where>
           a.id = c.userid and b.id = c.companyid
           <if test="state != null"> and c.state =#{state}</if>
           <if test="id != null"> and b.id = #{id}</if>
        </where>
    </select>

    <select id="selectHire" resultType="com.example.common.entity.Hire">
        select * from Hire
        <where>
            <if test="companyid != null"> companyid = #{companyid} </if>
            <if test="state != null"> and state = #{state}</if>
        </where>
    </select>

    <update id="downHire">
        update Hire set state = #{state} where id = #{id}
    </update>
</mapper>